
dependencies {
    compile "de.alpharogroup:vintage-time:$vintageTimeVersion"
    compile project(":randomizer-api")
    compile project(":randomizer-data")
    compile "de.alpharogroup:jobj-core:$jobjCoreVersion"
    compile "de.alpharogroup:silly-math:$sillyMathVersion"
    testCompile "de.alpharogroup:silly-beans:$sillyBeansVersion"
    testCompile "de.alpharogroup:test-objects:$testObjectsVersion"
    testCompile "org.meanbean:meanbean:$meanbeanVersion"
    testCompile "de.alpharogroup:silly-strings:$sillyStringsVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

repositories {
    mavenCentral()
}

apply plugin: "org.jetbrains.dokka"

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "html"
    outputDirectory = javadoc.destinationDir
    inputs.dir "src/main/java"
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

javadocJar.dependsOn dokkaJavadoc

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from(sourceSets.main.allSource)
}

def releaseVersion = !version.endsWith("SNAPSHOT")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${project.name}"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = "${project.name}"
                description = "This project holds utility classes to create or generate random data"
                url = "https://github.com/astrapi69/"+"${rootProject.name}"
                organization {
                    name = "Alpha Ro Group UG (haftungsbeschr√§ngt)"
                    url = "http://www.alpharogroup.de/"
                }
                issueManagement {
                    system = "GitHub"
                    url = "https://github.com/astrapi69/"+"${rootProject.name}"+"/issues"
                }
                licenses {
                    license {
                        name = "MIT License"
                        url = "http://www.opensource.org/licenses/mit-license.php"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        id = "astrapi69"
                        name = "Asterios Raptis"
                    }
                }
                scm {
                    connection = "scm:git:git:@github.com:astrapi69/"+"${rootProject.name}"+".git"
                    developerConnection = "scm:git:git@github.com:astrapi69/"+"${rootProject.name}"+".git"
                    url = "git:@github.com:astrapi69/"+"${rootProject.name}"+".git"
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv("ossrhUsername") ?: project.property("ossrhUsername")
                password System.getenv("ossrhPassword") ?: project.property("ossrhPassword")
            }
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = releaseVersion ? releasesRepoUrl : snapshotsRepoUrl
        }
    }
}

signing {
    if (releaseVersion) {
        sign publishing.publications.mavenJava
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
